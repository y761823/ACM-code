#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <queue>
using namespace std;
typedef long long LL;

int fx[] = {-1, 0, 1, 0};
int fy[] = {0, 1, 0, -1};
int vis[11][11], dis[11][11], r1, c1, r2, c2;
int n, m;

bool check(int r, int c) {
    return 0 <= r && r < n && 0 <= c && c < m;
}

void push(queue<pair<int, int> > &que, pair<int, int> p, int d) {
    if(check(p.first, p.second) && d < dis[p.first][p.second]) {
        dis[p.first][p.second] = d;
        que.push(p);
    }
}

int bfs(int sr, int sc) {
    memset(dis, 0x3f, sizeof(dis)); dis[sr][sc] = 0;
    queue<pair<int, int> > que; que.push(make_pair(sr, sc));
    if(sr == r1 && sc == c1) push(que, make_pair(r2, c2), 0);
    if(sr == r2 && sc == c2) push(que, make_pair(r1, c1), 0);

    while(!que.empty()) {
        auto p = que.front(); que.pop();
        for(int i = 0; i < 4; ++i) {
            auto n = make_pair(p.first + fx[i], p.second + fy[i]);
            push(que, n, dis[p.first][p.second] + 1);
            if(n == make_pair(r1, c1)) push(que, make_pair(r2, c2), dis[p.first][p.second] + 1);
            if(n == make_pair(r2, c2)) push(que, make_pair(r1, c1), dis[p.first][p.second] + 1);
        }
    }
    int res = 0;
    for(int i = 0; i < n; ++i)
        for(int j = 0; j < m; ++j) res = max(res, dis[i][j]);
    return res;
}

#define FOR(i, n) for(i = 0; i < n; ++i)
int get_maxdis() {
    int res = 0;
    for(int r = 0; r < n; ++r)
        for(int c = 0; c < m; ++c) {
            res = max(res, bfs(r, c));
        }
    return res;
}

class PublicTransit {
public:

    int minimumLongestDistance(int R, int C) {
        n = R, m = C;
        int res = 0x3f3f3f3f;
        FOR(r1, n) FOR(c1, m)
        for(r2 = r1; r2 < n; ++r2) FOR(c2, m)
            res = min(res, get_maxdis());
        return res;
    }
};
